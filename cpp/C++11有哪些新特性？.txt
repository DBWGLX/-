1.加入unordered_set ,unordered_map
2.lambda
3.auto
4.gettype



=======

1.nullptr替代 NULL （现在是个类型了）
更加类型安全

2. (我的4有误，应是decltype)
引入了 auto 和 decltype 这两个关键字实现了类型推导。关键字！类型推导！
decltype(a) b = a;

3.基于范围的for循环 for(auto&i : res){} 【这都没想到】

4.类和结构体的初始化列表。 【{}】

5.std::forward_list (单向链表) 【没用过】

6.右值引用和move语义 【好像见过。】
右值不能取地址。【 =的右边，居然是不能放左边的意思。】
（&&）： 允许对临时对象（右值）进行操作，避免不必要的拷贝。
通过 T&& 修饰，可以绑定到右值，用于实现<资源转移>。

Move Semantics移动语义允许临时对象将其资源转移，而不是拷贝，从而提高性能。
MyClass obj1(10);
MyClass obj2 = std::move(obj1); // 使用移动构造函数


<<<<
左值也能。& 表示引用（reference），它是一个变量的别名，用于直接操作该变量。
左值引用绑定到一个已有的对象（即具有内存地址的实体）。

>>>>
noexcept 是 C++11 引入的一个关键字，用来表明一个函数在运行时不会抛出异常。
如果在运行时抛出了异常，程序会直接终止，而不是进入异常处理流程。

MyClass& operator=(MyClass&& other) noexcept {
    if (this != &other) {       // 检查自赋值
        delete data;            // 释放当前资源
        data = other.data;      // 转移资源
        other.data = nullptr;   // 清空原对象，防止重复释放
    }
    return *this;               // 返回当前对象引用
}

【operator是运算符重载啊！】





7.无序容器√，正则表达式regex
regex用于字符串正则匹配，包括匹配、替换、分割等功能。


8.成员变量默认初始化。【居然是这个】
C++11 之前，类的成员变量只能在构造函数中初始化。C++11 开始，支持在声明时直接进行初始化：


9.智能指针。
一种自动管理资源生命周期的工具，避免显式的 delete 操作以及可能的内存泄漏问题。
std::unique_ptr：独占所有权的智能指针。std::unique_ptr<int> p1 = std::make_unique<int>(10); // 创建
std::shared_ptr：共享所有权的智能指针。
std::weak_ptr：不影响共享指针计数的弱引用。不增加引用计数。<如果两个对象互相拥有对方的 shared_ptr，会导致引用计数无法归零，资源无法释放，造成内存泄漏。>

std::unique_ptr<int> p2 = std::move(p1);            // 转移所有权


-1.constexpr

-2.变长参数模板

-3.线程支持
mutex 【锁】

c++11之前，依赖POSIX的pthread

-4.chrono时间库

-5.静态断言

-6.元组 tuple

-7.枚举类 enum class

-8.长整型字面量后缀：1'000'000，方便阅读。
